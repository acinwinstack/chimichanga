---

- name: Create Docker registry data directory
  file: path="{{ registry_data_dir }}" state=directory
  register: create_docker_var

- name: Check Docker registry is working
  when: create_docker_var
  shell: "{{ dir.bin }}/docker ps | grep {{ images.registry.name }}"
  delegate_to: "{{ groups['registrys'][0] }}"
  run_once: true
  register: check_registry
  ignore_errors: True

- name: Create Docker registry container
  when: check_registry|failed
  command: |
    {{ dir.bin }}/docker run -d -p {{ registry_port }}:5000 \
               -v {{ registry_data_dir }}:/var/lib/registry \
               --restart=always \
               --name {{ images.registry.name }} \
               {{ images.registry.repos }}{{ images.registry.name }}:{{ images.registry.tag }}
  delegate_to: "{{ groups['registrys'][0] }}"
  run_once: true

- name: Check Docker registry UI is working
  when: registry_ui
  shell: "{{ dir.bin }}/docker ps | grep {{ images.registry_ui.name }}"
  delegate_to: "{{ groups['registrys'][0] }}"
  run_once: true
  register: check_registry_ui
  ignore_errors: True

- name: Create Docker registry UI container
  when: check_registry_ui|failed and registry_ui
  command: |
    {{ dir.bin }}/docker run -d -p {{ registry_ui_port }}:80 \
               -e REGISTRY_HOST={{ groups['registrys'][0] }} \
               -e REGISTRY_PORT={{ registry_port }} \
               -e REGISTRY_PROTO={{ registry_proto }} \
               -e REGISTRY_SSL_VERIFY={{ registry_ssl_verify }} \
               -e USERNAME={{ account.user }} \
               -e PASSWORD={{ account.password }} \
               -e REGISTRY_ALLOW_DELETE={{ account.allow_delete }} \
               --restart=always --name {{ images.registry_ui.name }} \
               {{ images.registry_ui.repos }}{{ images.registry_ui.name }}:{{ images.registry_ui.tag }}
  delegate_to: "{{ groups['registrys'][0] }}"
  run_once: true
