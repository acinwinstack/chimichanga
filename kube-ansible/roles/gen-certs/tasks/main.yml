---

- name: Check SSL certificate directory already exists
  stat: path={{ dir.gen_ssl }}
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: check_ssl_dir

- name: Create SSL certificate directory
  when: not check_ssl_dir.stat.exists
  file: path={{ dir.gen_ssl }} state=directory
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: create_ssl_dir

- name: Check SSL CA config
  when: create_ssl_dir
  stat: path={{ ca_config }}
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: check_ca_config

- name: Generate SSL CA config
  when: not check_ca_config.stat.exists
  template: src=ca-config.json.j2 dest="{{ ca_config }}"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: gen_ca_config

- name: Check SSL certificate json files
  stat:
    path: "{{ dir.gen_ssl }}/{{ item.file }}"
  with_items:
    - { file: ca-csr.json,                 name: kubernetes, org: Kubernetes }
    - { file: etcd-ca-csr.json,            name: etcd, org: etcd }
    - { file: front-proxy-ca-csr.json,     name: kubernetes-front, org: Kubernetes }
    - { file: etcd-csr.json,               name: etcd, org: etcd }
    - { file: admin-csr.json,              name: admin, org: "system:masters" }
    - { file: apiserver-csr.json,          name: kube-apiserver, org: Kubernetes }
    - { file: manager-csr.json,            name: "system:kube-controller-manager", org: "system:kube-controller-manager" }
    - { file: scheduler-csr.json,          name: "system:kube-scheduler", org: "system:kube-scheduler" }
    - { file: front-proxy-client-csr.json, name: front-proxy-client, org: Kubernetes }
    - { file: kube-proxy-csr.json,         name: "system:kube-proxy", org: "system:kube-proxy" }
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: check_json_files

- name: Generate SSL certificate json files
  when: check_json_files and not item.stat.exists
  template:
    src: ca-csr.json.j2
    dest: "{{ dir.gen_ssl }}/{{ item.item.file }}"
  with_items: "{{ check_json_files['results'] }}"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: gen_json_files

- name: Check SSL certificate authority files
  stat:
    path: "{{ dir.gen_ssl }}/{{ item.bare }}.pem"
  with_items:
    - { file: ca-csr.json,             bare: ca }
    - { file: etcd-ca-csr.json,        bare: etcd-ca }
    - { file: front-proxy-ca-csr.json, bare: front-proxy-ca }
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: check_ca_files

- name: Create SSL certificate authority files
  when: check_ca_files and not item.stat.exists
  shell: |
    {{ dir.bin }}/cfssl gencert -initca {{ dir.gen_ssl }}/{{ item.item.file }} | \
      {{ dir.bin }}/cfssljson -bare {{ dir.gen_ssl }}/{{ item.item.bare }}
  with_items: "{{ check_ca_files['results'] }}"
  run_once: true
  register: create_ca_files

- name: Check SSL certificate key files
  stat:
    path: "{{ dir.gen_ssl }}/{{ item.bare }}.pem"
  with_items:
    - { file: etcd-csr.json,               ca: etcd-ca, hosts: "{{ etcd_hosts }}", bare: etcd }
    - { file: apiserver-csr.json,          ca: ca, hosts: "{{ apiserver_hosts }}", bare: apiserver }
    - { file: admin-csr.json,              ca: ca, bare: admin }
    - { file: kube-proxy-csr.json,         ca: ca, bare: kube-proxy }
    - { file: manager-csr.json,            ca: ca, hosts: "{{ master_hosts }}", bare: controller-manager }
    - { file: scheduler-csr.json,          ca: ca, hosts: "{{ master_hosts }}", bare: scheduler }
    - { file: front-proxy-client-csr.json, ca: front-proxy-ca, bare: front-proxy-client }
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: check_ssl_files

- name: Create SSL certificate key files
  when: check_ssl_files and not item.stat.exists
  shell: |
    {{ dir.bin }}/cfssl gencert \
      -ca={{ dir.gen_ssl }}/{{ item.item.ca }}.pem \
      -ca-key={{ dir.gen_ssl }}/{{ item.item.ca }}-key.pem \
      -config={{ ca_config }} \
      {% if item.item.hosts is defined -%}
      -hostname={{ item.item.hosts }} \
      {% endif -%}
      -profile={{ info.profile }} \
      {{ dir.gen_ssl }}/{{ item.item.file }} | \
      {{ dir.bin }}/cfssljson -bare {{ dir.gen_ssl }}/{{ item.item.bare }}
  with_items: "{{ check_ssl_files['results'] }}"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: create_ssl_files

- name: Check master kubelet SSL certificate json files
  stat:
    path: "{{ dir.gen_ssl }}/kubelet-{{ hostvars['' + item].ansible_hostname }}-csr.json"
  with_items: "{{ groups['masters'] }}"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: check_kubelet_json_files

- name: Generate master kubelet SSL certificate json files
  when: check_kubelet_json_files and not item.stat.exists
  template:
    src: kubelet-csr.json.j2
    dest: "{{ dir.gen_ssl }}/kubelet-{{ hostvars['' + item.item].ansible_hostname }}-csr.json"
  with_items: "{{ check_kubelet_json_files['results'] }}"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: gen_kubelet_json_files

- name: Check master kubelet SSL certificate key files
  stat:
    path: "{{ dir.gen_ssl }}/kubelet-{{ hostvars['' + item].ansible_hostname }}.pem"
  with_items: "{{ groups['masters'] }}"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: check_kubelet_ssl_files

- name: Create master kubelet SSL certificate key files
  when: check_kubelet_ssl_files and not item.stat.exists
  shell: |
    {{ dir.bin }}/cfssl gencert \
      -ca={{ dir.gen_ssl }}/ca.pem \
      -ca-key={{ dir.gen_ssl }}/ca-key.pem \
      -config={{ ca_config }} \
      -hostname={{ hostvars['' + item.item].ansible_hostname }},{{ item.item }} \
      -profile={{ info.profile }} \
      {{ dir.gen_ssl }}/kubelet-{{ hostvars['' + item.item].ansible_hostname }}-csr.json | \
      {{ dir.bin }}/cfssljson -bare {{ dir.gen_ssl }}/kubelet-{{ hostvars['' + item.item].ansible_hostname }}
  with_items: "{{ check_kubelet_ssl_files['results'] }}"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: create_kubelet_ssl_files

- name: Check service account key already exists
  stat:
    path: "{{ dir.gen_ssl  }}/sa.key"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: check_sa_key

- name: Create service account private and public key
  when: not check_sa_key.stat.exists
  command: "{{ item }}"
  with_items:
    - "openssl genrsa -out {{ dir.gen_ssl }}/sa.key 2048"
    - "openssl rsa -in {{ dir.gen_ssl }}/sa.key -pubout -out {{ dir.gen_ssl }}/sa.pub"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: create_sa_key

- name: Find all key file on remote host
  find:
    paths: "{{ dir.gen_ssl }}"
    patterns: 'sa.*,*.pem'
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: find_result

- name: Fetch files from remote host
  fetch: src="{{ item.path }}" dest="{{ dir.local_ssl }}" flat=yes
  with_items: "{{ find_result.files }}"
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"
