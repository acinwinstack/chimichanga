---

- name: Create Kubernetes PKI directory
  file: path="{{ kubernetes.dir.pki }}" state=directory

- name: Create Etcd SSL certificate directory
  file: path="{{ etcd.dir.ssl }}" state=directory

- name: Copy Etcd certificate from ansible host
  when: "ansible_host not in groups['etcds']"
  copy:
    src: "{{ dir.local_ssl }}/{{ item }}"
    dest: "{{ etcd.dir.ssl }}/{{ item }}"
  with_items: "{{ etcd_keys }}"
  register: copy_etcd_certs

- name: Copy Kubernetes certificate from ansible host
  copy:
    src: "{{ dir.local_ssl }}/{{ item }}"
    dest: "{{ kubernetes.dir.pki }}/{{ item }}"
  with_items: "{{ node_keys['' + node_role] }}"
  register: copy_certs

- name: Set Kubernetes cluster into config files
  when: copy_certs and node_role == 'master'
  command: |
    {{ dir.bin }}/kubectl config set-cluster {{ config.cluster_name }} \
      --certificate-authority={{ item.ca }} \
      --embed-certs=true \
      --server={{ lb_api_url }} \
      --kubeconfig={{ item.path }}
  with_items: "{{ config.contexts }}"
  register: set_cluster_config

- name: Set Kubernetes credentials into config files
  when: set_cluster_config and node_role == 'master'
  command: |
    {{ dir.bin }}/kubectl config set-credentials {{ item.name }} \
      {% if item.token is defined -%}
      --token={{ item.token }} \
      {% else %}
      --client-certificate={{ item.cert }} \
      --client-key={{ item.cert_key }} \
      --embed-certs=true \
      {% endif -%}
      --kubeconfig={{ item.path }}
  with_items: "{{ config.contexts }}"
  register: set_credentials_config

- name: Set Kubernetes context into config files
  when: set_credentials_config and node_role == 'master'
  command: |
    {{ dir.bin }}/kubectl config set-context {{ item.context }} \
      --cluster={{ config.cluster_name }} \
      --user={{ item.name }} \
      --kubeconfig={{ item.path }}
  with_items: "{{ config.contexts }}"
  register: set_context_config

- name: Use Kubernetes context config files
  when: set_context_config and node_role == 'master'
  command: |
    {{ dir.bin }}/kubectl config use-context {{ item.context }} \
      --kubeconfig={{ item.path }}
  with_items: "{{ config.contexts }}"
  register: use_context_config

- name: Fetch config from remote master
  when: use_context_config and node_role == 'master'
  fetch: src="{{ item }}" dest="{{ dir.local_ssl }}" flat=yes
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  with_items:
    - "{{ kubernetes.config.kube_proxy }}"
    - "{{ kubernetes.config.bootstrap }}"
