---

- name: "Set fact {{ network }} cni variable"
  set_fact:
    cni: "{{ vars[network] }}"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true

- name: Create Kubernetes cni directory
  file: path={{ kubernetes.dir.network }} state=directory
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true

- name: "Copy {{ cni.name }} RBAC yml file"
  template: src="{{ cni.name }}/{{ cni.template.rbac }}.j2" dest={{ kubernetes.dir.network }}/{{ cni.template.rbac }}
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: copy_rbac

- name: "Copy {{ cni.name }} yml file"
  template: src="{{ cni.name }}/{{ cni.template.ds }}.j2" dest={{ kubernetes.dir.network }}/{{ cni.template.ds }}
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: copy_daemonset

- name: "Check {{ cni.name }} cluster role already exists"
  when: copy_rbac
  shell: |
    {{ dir.bin }}/kubectl --kubeconfig={{ kubernetes.config.admin }} \
            get clusterrole | grep {{ cni.name }}
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: check_role
  ignore_errors: true

- name: "Create {{ cni.name }} cluster role"
  when: check_role|failed
  command: |
    {{ dir.bin }}/kubectl --kubeconfig={{ kubernetes.config.admin }} \
            apply -f {{ kubernetes.dir.network }}/{{ cni.template.rbac }}
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: create_role
  until: create_role.rc == 0
  retries: 5
  delay: 2

- name: "Check {{ cni.name }} daemonset is working"
  when: copy_daemonset
  shell: |
    {{ dir.bin }}/kubectl --kubeconfig={{ kubernetes.config.admin }} \
            get ds --all-namespaces | grep {{ cni.name }}
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: check_net
  ignore_errors: true

- name: "Apply {{ cni.name }} network daemonset"
  when: check_net|failed
  command: |
    {{ dir.bin }}/kubectl --kubeconfig={{ kubernetes.config.admin }} \
            apply -f {{ kubernetes.dir.network }}/{{ cni.template.ds }}
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: apply_cni
  until: apply_cni.rc == 0
  retries: 5
  delay: 2
