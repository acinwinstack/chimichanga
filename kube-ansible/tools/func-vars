#!/bin/bash
#
# Program: Vagrant func and vars
# History: 2017/1/19 Kyle.b Release

GROUP_VARS_PATH="./group_vars/all.yml"
VAGRAN_CONFIG_PATH="./tools/.config.rb"
SUBNET=$(grep -i "^\$private_subnet" ${VAGRAN_CONFIG_PATH} | awk '{ print $3 }' | sed 's/\"//g')
NET_COUNT=$(grep -i "^\$net_count" ${VAGRAN_CONFIG_PATH} | awk '{ print $3 }' | sed 's/\"//g')

# Usage message
function usage() {
  echo -e "Usage : setup-vagrant [options]\n"
  echo " -b|--boss         Number of master."
  echo " -w|--worker       Number of worker."
  echo " -c|--cpu          Number of cores per vm."
  echo " -m|--memory       Memory size per vm."
  echo " -p|--provider     Virtual machine provider(virtualbox, libvirt, hyperv)."
  echo " -o|--os-image     Virtual machine operation system(ubuntu16, centos7)."
  echo " -i|--interface    Network bind interface."
  echo " -n|--network      Container Network plugin."
  echo " -f|--force        Force deployment."
  echo " -d|--deploy       Auto deploy cluster."
  echo " --combine-master  Combine number of worker into masters."
  echo " --combine-etcd    Combine number of worker into etcds."
  exit 1
}

# Replace vagrant config
function vagrant_config() {
  perl -i -pe "s/${1}/${2}/g" ${VAGRAN_CONFIG_PATH}
}

# Replace roles defaults variable
function role_config() {
  perl -i -pe "s/${1}/${2}/g" ${3}
}

# Create inventory file
function set_inventory() {
  local TOTAL=$((${NODES}+${MASTERS}))
  local nodes="${SUBNET}.[${NET_COUNT}:$((${NET_COUNT}+${NODES}-1))]"
  local masters="${SUBNET}.[$((${NET_COUNT}+${NODES}-${COMBINE_MASTERS})):$((${NET_COUNT}+${TOTAL}-1))]"
  local etcds="${SUBNET}.[$((${NET_COUNT}+${NODES}-${COMBINE_ETCD})):$((${NET_COUNT}+${TOTAL}-1))]"
  local host_var="ansible_user=vagrant ansible_password=vagrant"
  rm -f inventory
  for group in "etcds" "masters" "nodes"; do
    echo "[${group}]" >> inventory
    if [ ${group} == "nodes" ]; then
      echo -e "${nodes} ${host_var}\n" >> inventory
    elif [ ${group} == "etcds"  ]; then
      echo -e "${etcds} ${host_var}\n" >> inventory
    else
      echo -e "${masters} ${host_var}\n" >> inventory
    fi
  done
  echo -e "[kube-cluster:children]\nmasters\nnodes\n" >> inventory
  echo -e "[kube-addon:children]\nmasters" >> inventory
}

# Create hosts file
function set_hosts() {
  local TOTAL=$((${NODES}+${MASTERS}))
  echo -e "127.0.0.1 localhost\n::1 localhost" > hosts

  for ((i=0; i<${TOTAL}; i++)) do
    PREFIX=""
    if [ ${i} -lt ${NODES} ]; then
      PREFIX="node$((${i}+1))"
    else
      PREFIX="master$((${i}+1-${NODES}))"
    fi
    echo "${SUBNET}.$((${NET_COUNT}+${i})) ${PREFIX}" >> hosts
  done
}

# Check is number
function isnum() {
  re='^[0-9]+$'
  if ! [[ ${1} =~ ${re} ]] ; then
    echo "Error: Not a number." >&2; exit 1
  fi
}

function check_cni() {
  local cni=${1}
  local isExist=false
  for n in "calico" "flannel" "canal" "weave" "router"; do
    if [ ${cni} == ${n} ]; then
      isExist=true
    fi
  done
  if [ ${isExist} == "false" ]; then
    echo "ERROR: the \"${cni}\" is not support."
    exit 1;
  fi
}

function check_opts() {
  while [ ${#} -gt 0 ]; do
    case "${1}" in
        -b|--boss)   isnum ${2}; export MASTERS=${2}; shift;;
        -w|--worker) isnum ${2}; export NODES=${2}; shift;;
        -c|--cpu)    isnum ${2}; export CPU=${2}; shift;;
        -m|--memory) isnum ${2}; export MEMORY=${2}; shift;;
        -i|--interface) export ETH=${2}; shift;;
        -o|--os-image)  export OS_IMAGE=${2}; shift;;
        -p|--provider)  export PROVIDER=${2}; shift;;
        -n|--network)   export CNI_PLUGIN=${2}; shift;;
        -f|--force)     export FORCE=${2}; shift;;
        -d|--deploy)    export DEPLOY=${2}; shift;;
        --combine-master) isnum ${2}; export COMBINE_MASTERS=${2}; shift;;
        --combine-etcd)   isnum ${2}; export COMBINE_ETCD=${2}; shift;;
        *) usage; break;;
    esac
    shift
  done
}
